#######################################################
# 
# TopologicalNode.py
# Python implementation of the Class TopologicalNode
# Generated by Enterprise Architect
# Created on:      17-Dec-2023 11:27:47 PM
# 
#######################################################
from IEC61970.Base.Domain.ActivePower import ActivePower
from IEC61970.Base.Domain.ReactivePower import ReactivePower
from IEC61970.Base.Core.ReportingGroup import ReportingGroup
from IEC61970.Base.Core.ConnectivityNodeContainer import ConnectivityNodeContainer
from IEC61970.Base.Core.BaseVoltage import BaseVoltage
from IEC61970.Base.Core.IdentifiedObject import IdentifiedObject
from IEC61970.Base.Core.ConnectivityNode import ConnectivityNode
from IEC61970.Base.Core.Terminal import Terminal

class TopologicalNode(IdentifiedObject):
    """For a detailed substation model a topological node is a set of connectivity
    nodes that, in the current network state, are connected together through any
    type of closed switches, including  jumpers. Topological nodes change as the
    current network state changes (i.e., switches, breakers, etc. change state).
      For a planning model, switch statuses are not used to form topological nodes.
    Instead they are manually created or deleted in a model builder tool.
    Topological nodes maintained this way are also called "busses".
    """

    def __init__(self):
        super().__init__()
        self.reporting_group = ReportingGroup()  # The reporting group to which the topological node belongs.
        self.connectivity_node_container = ConnectivityNodeContainer()  # The connectivity node container to which the toplogical node belongs.
        self.base_voltage = BaseVoltage() # The base voltage of the topologocial node.
        # The connectivity nodes combine to form this topological node.  May
        # depend on the current state of switches in the network.
        self.connectivity_nodes = ConnectivityNode()
        # The terminals associated with the topological node.   This can be used as an
        # alternative to the connectivity node path to terminal, thus making it
        # unnecessary to model connectivity nodes in some cases.   Note that if
        # connectivity nodes are in the model, this association would probably not be
        # used as an input specification.

        self.terminal = Terminal()
